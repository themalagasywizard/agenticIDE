{
  "version": 3,
  "sources": ["../../@tauri-apps/plugin-dialog/dist-js/index.js"],
  "sourcesContent": ["import { invoke } from '@tauri-apps/api/core';\r\n\r\n// Copyright 2019-2023 Tauri Programme within The Commons Conservancy\r\n// SPDX-License-Identifier: Apache-2.0\r\n// SPDX-License-Identifier: MIT\r\n/**\r\n * Open a file/directory selection dialog.\r\n *\r\n * The selected paths are added to the filesystem and asset protocol scopes.\r\n * When security is more important than the easy of use of this API,\r\n * prefer writing a dedicated command instead.\r\n *\r\n * Note that the scope change is not persisted, so the values are cleared when the application is restarted.\r\n * You can save it to the filesystem using [tauri-plugin-persisted-scope](https://github.com/tauri-apps/tauri-plugin-persisted-scope).\r\n * @example\r\n * ```typescript\r\n * import { open } from '@tauri-apps/plugin-dialog';\r\n * // Open a selection dialog for image files\r\n * const selected = await open({\r\n *   multiple: true,\r\n *   filters: [{\r\n *     name: 'Image',\r\n *     extensions: ['png', 'jpeg']\r\n *   }]\r\n * });\r\n * if (Array.isArray(selected)) {\r\n *   // user selected multiple files\r\n * } else if (selected === null) {\r\n *   // user cancelled the selection\r\n * } else {\r\n *   // user selected a single file\r\n * }\r\n * ```\r\n *\r\n * @example\r\n * ```typescript\r\n * import { open } from '@tauri-apps/plugin-dialog';\r\n * import { appDir } from '@tauri-apps/api/path';\r\n * // Open a selection dialog for directories\r\n * const selected = await open({\r\n *   directory: true,\r\n *   multiple: true,\r\n *   defaultPath: await appDir(),\r\n * });\r\n * if (Array.isArray(selected)) {\r\n *   // user selected multiple directories\r\n * } else if (selected === null) {\r\n *   // user cancelled the selection\r\n * } else {\r\n *   // user selected a single directory\r\n * }\r\n * ```\r\n *\r\n * @returns A promise resolving to the selected path(s)\r\n *\r\n * @since 2.0.0\r\n */\r\nasync function open(options = {}) {\r\n    if (typeof options === 'object') {\r\n        Object.freeze(options);\r\n    }\r\n    return await invoke('plugin:dialog|open', { options });\r\n}\r\n/**\r\n * Open a file/directory save dialog.\r\n *\r\n * The selected path is added to the filesystem and asset protocol scopes.\r\n * When security is more important than the easy of use of this API,\r\n * prefer writing a dedicated command instead.\r\n *\r\n * Note that the scope change is not persisted, so the values are cleared when the application is restarted.\r\n * You can save it to the filesystem using [tauri-plugin-persisted-scope](https://github.com/tauri-apps/tauri-plugin-persisted-scope).\r\n * @example\r\n * ```typescript\r\n * import { save } from '@tauri-apps/plugin-dialog';\r\n * const filePath = await save({\r\n *   filters: [{\r\n *     name: 'Image',\r\n *     extensions: ['png', 'jpeg']\r\n *   }]\r\n * });\r\n * ```\r\n *\r\n * @returns A promise resolving to the selected path.\r\n *\r\n * @since 2.0.0\r\n */\r\nasync function save(options = {}) {\r\n    if (typeof options === 'object') {\r\n        Object.freeze(options);\r\n    }\r\n    return await invoke('plugin:dialog|save', { options });\r\n}\r\n/**\r\n * Shows a message dialog with an `Ok` button.\r\n * @example\r\n * ```typescript\r\n * import { message } from '@tauri-apps/plugin-dialog';\r\n * await message('Tauri is awesome', 'Tauri');\r\n * await message('File not found', { title: 'Tauri', kind: 'error' });\r\n * ```\r\n *\r\n * @param message The message to show.\r\n * @param options The dialog's options. If a string, it represents the dialog title.\r\n *\r\n * @returns A promise indicating the success or failure of the operation.\r\n *\r\n * @since 2.0.0\r\n *\r\n */\r\nasync function message(message, options) {\r\n    const opts = typeof options === 'string' ? { title: options } : options;\r\n    await invoke('plugin:dialog|message', {\r\n        message: message.toString(),\r\n        title: opts?.title?.toString(),\r\n        kind: opts?.kind,\r\n        okButtonLabel: opts?.okLabel?.toString()\r\n    });\r\n}\r\n/**\r\n * Shows a question dialog with `Yes` and `No` buttons.\r\n * @example\r\n * ```typescript\r\n * import { ask } from '@tauri-apps/plugin-dialog';\r\n * const yes = await ask('Are you sure?', 'Tauri');\r\n * const yes2 = await ask('This action cannot be reverted. Are you sure?', { title: 'Tauri', kind: 'warning' });\r\n * ```\r\n *\r\n * @param message The message to show.\r\n * @param options The dialog's options. If a string, it represents the dialog title.\r\n *\r\n * @returns A promise resolving to a boolean indicating whether `Yes` was clicked or not.\r\n *\r\n * @since 2.0.0\r\n */\r\nasync function ask(message, options) {\r\n    const opts = typeof options === 'string' ? { title: options } : options;\r\n    return await invoke('plugin:dialog|ask', {\r\n        message: message.toString(),\r\n        title: opts?.title?.toString(),\r\n        kind: opts?.kind,\r\n        yesButtonLabel: opts?.okLabel?.toString(),\r\n        noButtonLabel: opts?.cancelLabel?.toString()\r\n    });\r\n}\r\n/**\r\n * Shows a question dialog with `Ok` and `Cancel` buttons.\r\n * @example\r\n * ```typescript\r\n * import { confirm } from '@tauri-apps/plugin-dialog';\r\n * const confirmed = await confirm('Are you sure?', 'Tauri');\r\n * const confirmed2 = await confirm('This action cannot be reverted. Are you sure?', { title: 'Tauri', kind: 'warning' });\r\n * ```\r\n *\r\n * @param message The message to show.\r\n * @param options The dialog's options. If a string, it represents the dialog title.\r\n *\r\n * @returns A promise resolving to a boolean indicating whether `Ok` was clicked or not.\r\n *\r\n * @since 2.0.0\r\n */\r\nasync function confirm(message, options) {\r\n    const opts = typeof options === 'string' ? { title: options } : options;\r\n    return await invoke('plugin:dialog|confirm', {\r\n        message: message.toString(),\r\n        title: opts?.title?.toString(),\r\n        kind: opts?.kind,\r\n        okButtonLabel: opts?.okLabel?.toString(),\r\n        cancelButtonLabel: opts?.cancelLabel?.toString()\r\n    });\r\n}\r\n\r\nexport { ask, confirm, message, open, save };\r\n"],
  "mappings": ";;;AAAA,SAAS,cAAc;AAyDvB,eAAe,KAAK,UAAU,CAAC,GAAG;AAC9B,MAAI,OAAO,YAAY,UAAU;AAC7B,WAAO,OAAO,OAAO;AAAA,EACzB;AACA,SAAO,MAAM,OAAO,sBAAsB,EAAE,QAAQ,CAAC;AACzD;AAyBA,eAAe,KAAK,UAAU,CAAC,GAAG;AAC9B,MAAI,OAAO,YAAY,UAAU;AAC7B,WAAO,OAAO,OAAO;AAAA,EACzB;AACA,SAAO,MAAM,OAAO,sBAAsB,EAAE,QAAQ,CAAC;AACzD;AAkBA,eAAe,QAAQA,UAAS,SAAS;AA9GzC;AA+GI,QAAM,OAAO,OAAO,YAAY,WAAW,EAAE,OAAO,QAAQ,IAAI;AAChE,QAAM,OAAO,yBAAyB;AAAA,IAClC,SAASA,SAAQ,SAAS;AAAA,IAC1B,QAAO,kCAAM,UAAN,mBAAa;AAAA,IACpB,MAAM,6BAAM;AAAA,IACZ,gBAAe,kCAAM,YAAN,mBAAe;AAAA,EAClC,CAAC;AACL;AAiBA,eAAe,IAAIA,UAAS,SAAS;AAvIrC;AAwII,QAAM,OAAO,OAAO,YAAY,WAAW,EAAE,OAAO,QAAQ,IAAI;AAChE,SAAO,MAAM,OAAO,qBAAqB;AAAA,IACrC,SAASA,SAAQ,SAAS;AAAA,IAC1B,QAAO,kCAAM,UAAN,mBAAa;AAAA,IACpB,MAAM,6BAAM;AAAA,IACZ,iBAAgB,kCAAM,YAAN,mBAAe;AAAA,IAC/B,gBAAe,kCAAM,gBAAN,mBAAmB;AAAA,EACtC,CAAC;AACL;AAiBA,eAAe,QAAQA,UAAS,SAAS;AAjKzC;AAkKI,QAAM,OAAO,OAAO,YAAY,WAAW,EAAE,OAAO,QAAQ,IAAI;AAChE,SAAO,MAAM,OAAO,yBAAyB;AAAA,IACzC,SAASA,SAAQ,SAAS;AAAA,IAC1B,QAAO,kCAAM,UAAN,mBAAa;AAAA,IACpB,MAAM,6BAAM;AAAA,IACZ,gBAAe,kCAAM,YAAN,mBAAe;AAAA,IAC9B,oBAAmB,kCAAM,gBAAN,mBAAmB;AAAA,EAC1C,CAAC;AACL;",
  "names": ["message"]
}
